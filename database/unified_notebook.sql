-- create a new blank notebook
set variable notebook_id = uuid();

set variable contents = '{
  "cells": [
    {
      "query": "DROP VIEW IF EXISTS test_view;\n-- recreate seed tables\nDROP TABLE IF EXISTS unified_dim_geo_country_mapping;\nDROP TABLE IF EXISTS unified_dim_rfc_5646_language_mapping;\nDROP TABLE IF EXISTS unified_dim_iso_639_2t;\nDROP TABLE IF EXISTS unified_dim_iso_639_3;\n  \nINSTALL iceberg;\nLOAD iceberg;\ncreate view test_view AS (SELECT * FROM iceberg_scan(''./database/atomic/events/'', metadata_compression_codec=''gzip'', allow_moved_paths=true));\n\n-- create tables from seeds\ncreate table unified_dim_geo_country_mapping AS (SELECT * FROM read_csv(''https://raw.githubusercontent.com/snowplow/dbt-snowplow-unified/refs/heads/main/seeds/snowplow_unified_dim_geo_country_mapping.csv''));\ncreate table unified_dim_rfc_5646_language_mapping AS (SELECT * FROM read_csv(''https://raw.githubusercontent.com/snowplow/dbt-snowplow-unified/refs/heads/main/seeds/snowplow_unified_dim_rfc_5646_language_mapping.csv''));\ncreate table unified_dim_iso_639_2t AS (SELECT * FROM read_csv(''https://raw.githubusercontent.com/snowplow/dbt-snowplow-unified/refs/heads/main/seeds/snowplow_unified_dim_iso_639_2t.csv''));\ncreate table unified_dim_iso_639_3 AS (SELECT * FROM read_csv(''https://raw.githubusercontent.com/snowplow/dbt-snowplow-unified/refs/heads/main/seeds/snowplow_unified_dim_iso_639_3.csv''));",
      "cellId": 1,
      "useDatabase": "memory"
    },
    {
      "query": "-- set your settings here!\nSET VARIABLE app_id = [''snowplow-local'']; -- all app_ids if empty\nSET VARIABLE heartbeat = 10; -- Page ping heartbeat time as defined in your tracker configuration.\nSET VARIABLE min_visit_length = 5; -- Minimum visit length as defined in your tracker configuration.\nSET VARIABLE ua_bot_filter = true; -- Filter bots (at the event level) based on a list of known bot user agents\n\n-- entity feature toggles\nSET VARIABLE enable_app_errors = false;\nSET VARIABLE enable_application_context = false;\nSET VARIABLE enable_browser_context = false;\nSET VARIABLE enable_browser_context_2 = false;\nSET VARIABLE enable_client_session_context = false; -- for user identifiers\nSET VARIABLE enable_deep_link_context = false;\nSET VARIABLE enable_geolocation_context = false;\nSET VARIABLE enable_iab = false;\nSET VARIABLE enable_mobile_context = false;\nSET VARIABLE enable_screen_context = false;\nSET VARIABLE enable_screen_summary_context = false;\nSET VARIABLE enable_ua = false;\nSET VARIABLE enable_web_page = true;\nSET VARIABLE enable_yauaa = false;\n\n-- can we do *?\nset variable q = ''\n  SELECT *, ''\n  || IF(GETVARIABLE(''enable_app_errors''), ''contexts_com_snowplowanalytics_snowplow_application_error_1'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_application_error_1,''\n  || IF(GETVARIABLE(''enable_application_context''), ''contexts_com_snowplowanalytics_mobile_application_1'', ''[]'') || '' as contexts_com_snowplowanalytics_mobile_application_1,''\n  || IF(GETVARIABLE(''enable_browser_context''), ''contexts_com_snowplowanalytics_snowplow_browser_context_1'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_browser_context_1,''\n  || IF(GETVARIABLE(''enable_browser_context_2''), ''contexts_com_snowplowanalytics_snowplow_browser_context_2'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_browser_context_2,''\n  || IF(GETVARIABLE(''enable_client_session_context''), ''contexts_com_snowplowanalytics_snowplow_client_session_1'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_client_session_1,''\n  || IF(GETVARIABLE(''enable_deep_link_context''), ''contexts_com_snowplowanalytics_mobile_deep_link_1'', ''[]'') || '' as contexts_com_snowplowanalytics_mobile_deep_link_1,''\n  || IF(GETVARIABLE(''enable_geolocation_context''), ''contexts_com_snowplowanalytics_snowplow_geolocation_context_1'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_geolocation_context_1,''\n  || IF(GETVARIABLE(''enable_iab''), ''contexts_com_iab_snowplow_spiders_and_robots_1'', ''[]'') || '' as contexts_com_iab_snowplow_spiders_and_robots_1,''\n  || IF(GETVARIABLE(''enable_mobile_context''), ''contexts_com_snowplowanalytics_snowplow_mobile_context_1'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_mobile_context_1,''\n  || IF(GETVARIABLE(''enable_mobile_context''), ''unstruct_event_com_snowplowanalytics_mobile_screen_view_1'', ''struct_pack(k:= 1)'') || '' as unstruct_event_com_snowplowanalytics_mobile_screen_view_1,''\n  || IF(GETVARIABLE(''enable_screen_context''), ''contexts_com_snowplowanalytics_mobile_screen_1'', ''[]'') || '' as contexts_com_snowplowanalytics_mobile_screen_1,''\n  || IF(GETVARIABLE(''enable_screen_summary_context''), ''contexts_com_snowplowanalytics_mobile_screen_summary_1'', ''[]'') || '' as contexts_com_snowplowanalytics_mobile_screen_summary_1,''\n  || IF(GETVARIABLE(''enable_ua''), ''contexts_com_snowplowanalytics_snowplow_ua_parser_context_1'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_ua_parser_context_1,''\n  || IF(GETVARIABLE(''enable_web_page''), ''contexts_com_snowplowanalytics_snowplow_web_page_1'', ''[]'') || '' as contexts_com_snowplowanalytics_snowplow_web_page_1,''\n  || IF(GETVARIABLE(''enable_yauaa''), ''contexts_nl_basjes_yauaa_context_1'', ''[]'') || '' as contexts_nl_basjes_yauaa_context_1''\n  || '' FROM test_view''\n  || IF(LEN(GETVARIABLE(''app_id'')) != 0, '' WHERE app_id IN '' || list_transform(getvariable(''app_id''), x -> '''''''' || x || '''''''')::varchar, '''' );\n\nselect getvariable(''q'');\ndrop view if exists refined;\ncreate view refined AS (SELECT * from query(getvariable(''q'')));",
      "cellId": 2,
      "useDatabase": "memory"
    },
    {
      "query": "select distinct(app_id), count(*) from refined GROUP BY 1 ORDER BY 1 DESC;",
      "cellId": 3,
      "useDatabase": "memory"
    },
    {
      "query": "DROP VIEW IF EXISTS unified_events; -- drop existing view if required\n\nCREATE VIEW unified_events AS\nWITH identified_events AS (\n    SELECT\n        COALESCE(\n            COALESCE(contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''sessionId'', NULL),\n            domain_sessionid, \n            NULL\n        ) AS session_identifier,\n        *\n    FROM refined\n),\nbase_query AS (\n    SELECT\n        a.*,\n        COALESCE(\n            COALESCE(contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''sessionId'', NULL),\n            domain_sessionid, \n            NULL\n        ) AS user_identifier,\n    FROM identified_events a\n    QUALIFY ROW_NUMBER() OVER (PARTITION BY a.event_id ORDER BY a.collector_tstamp, a.dvce_created_tstamp) = 1\n),\n\nbase_query_2 AS (\n    SELECT\n        *\n    , contexts_com_snowplowanalytics_snowplow_web_page_1[1]->>''id'' AS page_view__id\n  \n  , contexts_com_iab_snowplow_spiders_and_robots_1[1]->>''category'' AS iab__category\n  , contexts_com_iab_snowplow_spiders_and_robots_1[1]->>''primary_impact'' AS iab__primary_impact\n  , contexts_com_iab_snowplow_spiders_and_robots_1[1]->>''reason'' AS iab__reason\n  , try_cast(contexts_com_iab_snowplow_spiders_and_robots_1[1]->>''spider_or_robot'' AS BOOLEAN) AS iab__spider_or_robot\n\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''useragent_family'' AS ua__useragent_family\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''useragent_major'' AS ua__useragent_major\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''useragent_minor'' AS ua__useragent_minor\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''useragent_patch'' AS ua__useragent_patch\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''useragent_version'' AS ua__useragent_version\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''os_family'' AS ua__os_family\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''os_major'' AS ua__os_major\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''os_minor'' AS ua__os_minor\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''os_patch'' AS ua__os_patch\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''os_patch_minor'' AS ua__os_patch_minor\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''os_version'' AS ua__os_version\n  , contexts_com_snowplowanalytics_snowplow_ua_parser_context_1[1]->>''device_family'' AS ua__device_family\n\n  , contexts_nl_basjes_yauaa_context_1[1]->>''device_class'' AS yauaa__device_class\n  , contexts_nl_basjes_yauaa_context_1[1]->>''agent_class'' AS yauaa__agent_class\n  , contexts_nl_basjes_yauaa_context_1[1]->>''agent_name'' AS yauaa__agent_name\n  , contexts_nl_basjes_yauaa_context_1[1]->>''agent_name_version'' AS yauaa__agent_name_version\n  , contexts_nl_basjes_yauaa_context_1[1]->>''agent_name_version_major'' AS yauaa__agent_name_version_major\n  , contexts_nl_basjes_yauaa_context_1[1]->>''agent_version'' AS yauaa__agent_version\n  , contexts_nl_basjes_yauaa_context_1[1]->>''agent_version_major'' AS yauaa__agent_version_major\n  , contexts_nl_basjes_yauaa_context_1[1]->>''device_brand'' AS yauaa__device_brand\n  , contexts_nl_basjes_yauaa_context_1[1]->>''device_name'' AS yauaa__device_name\n  , contexts_nl_basjes_yauaa_context_1[1]->>''device_version'' AS yauaa__device_version\n  , contexts_nl_basjes_yauaa_context_1[1]->>''layout_engine_class'' AS yauaa__layout_engine_class\n  , contexts_nl_basjes_yauaa_context_1[1]->>''layout_engine_name'' AS yauaa__layout_engine_name\n  , contexts_nl_basjes_yauaa_context_1[1]->>''layout_engine_name_version'' AS yauaa__layout_engine_name_version\n  , contexts_nl_basjes_yauaa_context_1[1]->>''layout_engine_name_version_major'' AS yauaa__layout_engine_name_version_major\n  , contexts_nl_basjes_yauaa_context_1[1]->>''layout_engine_version'' AS yauaa__layout_engine_version\n  , contexts_nl_basjes_yauaa_context_1[1]->>''layout_engine_version_major'' AS yauaa__layout_engine_version_major\n  , contexts_nl_basjes_yauaa_context_1[1]->>''operating_system_class'' AS yauaa__operating_system_class\n  , contexts_nl_basjes_yauaa_context_1[1]->>''operating_system_name'' AS yauaa__operating_system_name\n  , contexts_nl_basjes_yauaa_context_1[1]->>''operating_system_name_version'' AS yauaa__operating_system_name_version\n  , contexts_nl_basjes_yauaa_context_1[1]->>''operating_system_version'' AS yauaa__operating_system_version\n\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''viewport'' AS browser__viewport\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''document_size'' AS browser__document_size\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''resolution'' AS browser__resolution\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''color_depth''::INT AS browser__color_depth\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''device_pixel_ratio'' AS browser__device_pixel_ratio\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''cookies_enabled'' AS browser__cookies_enabled\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''online'' AS browser__online\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''browser_language'' AS browser__browser_language\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''document_language'' AS browser__document_language\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''webdriver'' AS browser__webdriver\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''device_memory'' AS browser__device_memory\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''hardware_concurrency'' AS browser__hardware_concurrency\n  , contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''tab_id'' AS browser__tab_id\n\n\n  , unstruct_event_com_snowplowanalytics_mobile_screen_view_1->>''id'' AS screen_view__id\n  , unstruct_event_com_snowplowanalytics_mobile_screen_view_1->>''name'' AS screen_view__name\n  , unstruct_event_com_snowplowanalytics_mobile_screen_view_1->>''previous_id'' AS screen_view__previous_id\n  , unstruct_event_com_snowplowanalytics_mobile_screen_view_1->>''previous_name'' AS screen_view__previous_name\n  , unstruct_event_com_snowplowanalytics_mobile_screen_view_1->>''previous_type'' AS screen_view__previous_type\n  , unstruct_event_com_snowplowanalytics_mobile_screen_view_1->>''transition_type'' AS screen_view__transition_type\n  , unstruct_event_com_snowplowanalytics_mobile_screen_view_1->>''type'' AS screen_view__type\n  \n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''session_id'' AS session__session_id\n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''session_index'' AS session__session_index\n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''previous_session_id'' AS session__previous_session_id\n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''user_id'' AS session__user_id\n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''first_event_id'' AS session__first_event_id\n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''event_index'' AS session__event_index\n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''storage_mechanism'' AS session__storage_mechanism\n  , contexts_com_snowplowanalytics_snowplow_client_session_1[1]->>''first_event_timestamp'' AS session__first_event_timestamp\n\n\n\n        , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''device_manufacturer'' AS mobile__device_manufacturer\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''device_model'' AS mobile__device_model\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''os_type'' AS mobile__os_type\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''os_version'' AS mobile__os_version\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''android_idfa'' AS mobile__android_idfa\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''apple_idfa'' AS mobile__apple_idfa\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''apple_idfv'' AS mobile__apple_idfv\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''carrier'' AS mobile__carrier\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''open_idfa'' AS mobile__open_idfa\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''network_technology'' AS mobile__network_technology\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''network_type'' AS mobile__network_type\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''physical_memory'' AS mobile__physical_memory\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''system_available_memory'' AS mobile__system_available_memory\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''app_available_memory'' AS mobile__app_available_memory\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''battery_level'' AS mobile__battery_level\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''battery_state'' AS mobile__battery_state\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''low_power_mode'' AS mobile__low_power_mode\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''available_storage'' AS mobile__available_storage\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''total_storage'' AS mobile__total_storage\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''is_portrait'' AS mobile__is_portrait\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''resolution'' AS mobile__resolution\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''scale'' AS mobile__scale\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''language'' AS mobile__language\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''app_set_id'' AS mobile__app_set_id\n      , contexts_com_snowplowanalytics_snowplow_mobile_context_1[1]->>''app_set_id_scope'' AS mobile__app_set_id_scope\n\n      , contexts_com_snowplowanalytics_snowplow_geolocation_context_1[1]->>''latitude'' AS geo__latitude\n      , contexts_com_snowplowanalytics_snowplow_geolocation_context_1[1]->>''longitude'' AS geo__longitude\n      , contexts_com_snowplowanalytics_snowplow_geolocation_context_1[1]->>''latitude_longitude_accuracy'' AS geo__latitude_longitude_accuracy\n      , contexts_com_snowplowanalytics_snowplow_geolocation_context_1[1]->>''altitude'' AS geo__altitude\n      , contexts_com_snowplowanalytics_snowplow_geolocation_context_1[1]->>''altitude_accuracy'' AS geo__altitude_accuracy\n      , contexts_com_snowplowanalytics_snowplow_geolocation_context_1[1]->>''bearing'' AS geo__bearing\n      , contexts_com_snowplowanalytics_snowplow_geolocation_context_1[1]->>''speed'' AS geo__speed\n\n      , contexts_com_snowplowanalytics_mobile_application_1[1]->>''build'' AS app__build\n      , contexts_com_snowplowanalytics_mobile_application_1[1]->>''version'' AS app__version\n\n      , contexts_com_snowplowanalytics_mobile_screen_1[1]->>''id'' AS screen__id\n      , contexts_com_snowplowanalytics_mobile_screen_1[1]->>''name'' AS screen__name\n      , contexts_com_snowplowanalytics_mobile_screen_1[1]->>''activity'' AS screen__activity\n      , contexts_com_snowplowanalytics_mobile_screen_1[1]->>''fragment'' AS screen__fragment\n      , contexts_com_snowplowanalytics_mobile_screen_1[1]->>''top_view_controller'' AS screen__top_view_controller\n      , contexts_com_snowplowanalytics_mobile_screen_1[1]->>''type'' AS screen__type\n      , contexts_com_snowplowanalytics_mobile_screen_1[1]->>''view_controller'' AS screen__view_controller\n\n      , contexts_com_snowplowanalytics_mobile_deep_link_1[1]->>''url'' AS deep_link__url\n      , contexts_com_snowplowanalytics_mobile_deep_link_1[1]->>''referrer'' AS deep_link__referrer\n\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''viewport'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''viewport'') AS browser__viewport\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''document_size'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''document_size'') AS browser__documentSize\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''resolution'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''resolution'') AS browser__resolution\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''color_depth'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''color_depth'') AS browser__colorDepth\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''device_pixel_ratio'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''device_pixel_ratio'') AS browser__devicePixelRatio\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''cookies_enabled'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''cookies_enabled'') AS browser__cookiesEnabled\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''online'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''online'') AS browser__online\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''browser_language'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''browser_language'') AS browser__browserLanguage\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''document_language'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''document_language'') AS browser__documentLanguage\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''webdriver'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''webdriver'') AS browser__webdriver\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''device_memory'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''device_memory'') AS browser__deviceMemory\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''hardware_concurrency'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''hardware_concurrency'') AS browser__hardwareConcurrency\n      , COALESCE(contexts_com_snowplowanalytics_snowplow_browser_context_1[1]->>''tab_id'', contexts_com_snowplowanalytics_snowplow_browser_context_2[1]->>''tab_id'') AS browser__tabId\n\n      -- screen summary\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''foreground_sec'' AS screen_summary__foreground_sec\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''background_sec'' AS screen_summary__background_sec\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''last_item_index'' AS screen_summary__last_item_index\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''items_count'' AS screen_summary__items_count\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''min_x_offset'' AS screen_summary__min_x_offset\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''min_y_offset'' AS screen_summary__min_y_offset\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''max_x_offset'' AS screen_summary__max_x_offset\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''max_y_offset'' AS screen_summary__max_y_offset\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''content_width'' AS screen_summary__content_width\n    , contexts_com_snowplowanalytics_mobile_screen_summary_1[1]->>''content_height'' AS screen_summary__content_height\n  \n    FROM base_query\n),\nbase as (\n\n    select\n      *,\n      cast(coalesce(\n          ev.page_view__id,\n          ev.screen_view__id,\n          ev.screen__id,\n        null, null) as TEXT ) as view_id,\n        cast(coalesce(\n          ev.session__session_index::int,\n          ev.domain_sessionidx,\n        null, null) as INT ) as device_session_index,\n      cast(coalesce(\n          ev.deep_link__referrer,\n        null, null) as TEXT ) as referrer,\n      cast(coalesce(\n          ev.deep_link__url,\n        null, null) as TEXT ) as url,\n      cast(coalesce(\n          ev.mobile__resolution,\n        null, null) as TEXT ) as screen_resolution,\n      cast(coalesce(\n          ev.mobile__os_type,\n          ev.yauaa__operating_system_name,\n          ev.ua__os_family,\n        null, null) as TEXT ) as os_type,\n      cast(coalesce(\n          ev.yauaa__operating_system_version,\n          ev.mobile__os_version,\n          ev.ua__os_version,\n        null, null) as TEXT ) as os_version,\n      cast(coalesce(\n          ev.domain_userid,\n          ev.session__user_id,\n        null, null) as TEXT ) as device_identifier,\n      case when platform = ''web'' then ''Web'' --includes mobile web\n          when platform = ''mob'' then ''Mobile/Tablet''\n          when platform = ''pc'' then ''Desktop/Laptop/Netbook''\n          when platform = ''srv'' then ''Server-Side App''\n          when platform = ''app'' then ''General App''\n          when platform = ''tv'' then ''Connected TV''\n          when platform = ''cnsl'' then ''Games Console''\n          when platform = ''iot'' then ''Internet of Things''\n          when platform = ''headset'' then ''AR/VR Headset'' end as platform_name\n    from base_query_2 as ev\n  )\n  select\n    *,\n      case when platform = ''web'' then yauaa__device_class\n          when yauaa__device_class = ''Phone'' then ''Mobile''\n          when yauaa__device_class = ''Tablet'' then ''Tablet''\n          else platform_name end as device_category\n\n  from base\n  WHERE\n  CASE WHEN\n    GETVARIABLE(''ua_bot_filter'') = True THEN\n      useragent not similar to ''.*(bot|crawl|slurp|spider|archiv|spinn|sniff|seo|audit|survey|pingdom|worm|capture|(browser|screen)shots|analyz|index|thumb|check|facebook|PingdomBot|PhantomJS|YandexBot|Twitterbot|a_archiver|facebookexternalhit|Bingbot|BingPreview|Googlebot|Baiduspider|360(Spider|User-agent)|semalt).*''          \n    ELSE\n      1=1\n  END",
      "cellId": 4,
      "useDatabase": "memory"
    },
    {
      "query": "DROP VIEW IF EXISTS unified_screen_summary_metrics;\nDROP VIEW IF EXISTS unified_pv_engaged_time; -- drop if required\n\nCREATE VIEW unified_screen_summary_metrics AS (\n  with prep as (\n  select\n    ev.view_id\n    , ev.session_identifier\n    , round(cast(max(ev.screen_summary__foreground_sec) as float), 2) as foreground_sec\n    , round(cast(max(ev.screen_summary__background_sec) as float), 2) as background_sec\n    , max(ev.screen_summary__last_item_index) as last_item_index\n    , max(ev.screen_summary__items_count)::int as items_count\n    , min(ev.screen_summary__min_x_offset) as min_x_offset\n    , min(ev.screen_summary__min_y_offset) as min_y_offset\n    , max(ev.screen_summary__max_x_offset) as max_x_offset\n    , max(ev.screen_summary__max_y_offset) as max_y_offset\n    , max(ev.screen_summary__content_width)::int as content_width\n    , max(ev.screen_summary__content_height)::int as content_height\n  from unified_events as ev\n  where ev.view_id is not null\n    and ev.platform <> ''web''\n    and ev.event_name in (''screen_end'', ''application_background'', ''application_foreground'')\n  group by 1, 2\n)\nselect *\n  , case\n    when max_x_offset is not null and content_width is not null and content_width > 0 then\n      cast(round(100.0 * cast(max_x_offset as float) / cast(content_width as float)) as float)\n    else null\n  end as horizontal_percentage_scrolled\n  , case\n    when max_y_offset is not null and content_height is not null and content_height > 0 then\n      cast(round(100.0 * cast(max_y_offset as float) / cast(content_height as float)) as float)\n    else null\n  end as vertical_percentage_scrolled\n  , case\n    when last_item_index is not null and items_count is not null and items_count > 0 then\n      cast(round(100.0 * (cast(last_item_index as float) + 1) / cast(items_count as float)) as float)\n    else null\n  end as list_items_percentage_scrolled\nfrom prep\n);\n\nCREATE VIEW unified_pv_engaged_time AS\nSELECT \n  ev.view_id,\n  ev.session_identifier,\n  MAX(ev.derived_tstamp) AS end_tstamp,\n  (GETVARIABLE(''heartbeat'') * (COUNT(DISTINCT FLOOR(EXTRACT(EPOCH FROM ev.dvce_created_tstamp) / GETVARIABLE(''heartbeat''))) - 1)) + GETVARIABLE(''min_visit_length'') AS engaged_time_in_s,\n  CAST(NULL AS FLOAT) AS absolute_time_in_s\nFROM unified_events AS ev\nWHERE ev.event_name = ''page_ping''\nAND ev.view_id IS NOT NULL\nGROUP BY ev.view_id, ev.session_identifier\nUNION ALL -- screen summary metrics (if they exist!)\nSELECT\n  t.view_id,\n  t.session_identifier,\n  NULL::timestamp AS end_tstamp,\n  t.foreground_sec as engaged_time_in_s,\n  t.foreground_sec + coalesce(t.background_sec, 0) AS absolute_time_in_s\nFROM\n  unified_screen_summary_metrics t",
      "cellId": 5,
      "useDatabase": "memory"
    },
    {
      "query": "DROP VIEW IF EXISTS unified_pv_scroll_depth;\ncreate view unified_pv_scroll_depth AS\nwith prep as (\n  select\n    ev.view_id,\n    ev.session_identifier,\n\n    max(ev.doc_width) as doc_width,\n    max(ev.doc_height) as doc_height,\n    max(ev.br_viewwidth) as br_viewwidth,\n    max(ev.br_viewheight) as br_viewheight,\n\n    -- coalesce replaces null with 0 (because the page view event does send an offset)\n    -- greatest prevents outliers (negative offsets)\n    -- least also prevents outliers (offsets greater than the docwidth or docheight)\n    least(greatest(min(coalesce(ev.pp_xoffset_min, 0)), 0), max(ev.doc_width)) as hmin, -- should be zero\n    least(greatest(max(coalesce(ev.pp_xoffset_max, 0)), 0), max(ev.doc_width)) as hmax,\n    \n    least(greatest(min(coalesce(ev.pp_yoffset_min, 0)), 0), max(ev.doc_height)) as vmin, -- should be zero (edge case: not zero because the pv event is missing)\n    least(greatest(max(coalesce(ev.pp_yoffset_max, 0)), 0), max(ev.doc_height)) as vmax\n\n  from unified_events as ev\n\n  where ev.event_name in (''page_view'', ''page_ping'')\n    and ev.view_id is not null\n    and ev.doc_height > 0 -- exclude problematic (but rare) edge case\n    and ev.doc_width > 0 -- exclude problematic (but rare) edge case\n\n  group by 1, 2\n)\n\nselect\n  view_id,\n  session_identifier,\n  doc_width,\n  doc_height,\n  br_viewwidth,\n  br_viewheight,\n  hmin,\n  hmax,\n  vmin,\n  vmax,\n  cast(round(100*(greatest(hmin, 0)/cast(doc_width as FLOAT))) as FLOAT) as relative_hmin, -- brackets matter: because hmin is of type int, we need to divide before we multiply by 100 or we risk an overflow\n  cast(round(100*(least(hmax + br_viewwidth, doc_width)/cast(doc_width as FLOAT))) as FLOAT) as relative_hmax,\n  cast(round(100*(greatest(vmin, 0)/cast(doc_height as FLOAT))) as FLOAT) as relative_vmin,\n  cast(round(100*(least(vmax + br_viewheight, doc_height)/cast(doc_height as FLOAT))) as FLOAT) as relative_vmax, -- not zero when a user hasn''t scrolled because it includes the non-zero viewheight\n  cast(null as INT) as last_list_item_index,\n  cast(null as INT) as list_items_count,\n  cast(null as INT) as list_items_percentage_scrolled\nfrom prep\n-- screen summary stats\nunion all\nselect\n  t.view_id,\n  t.session_identifier,\n  t.content_width as doc_width,\n  t.content_height as doc_height,\n  NULL::int as br_viewwidth,\n  NULL::int as br_viewheight,\n  t.min_x_offset as hmin,\n  t.max_x_offset as hmax,\n  t.min_y_offset as vmin,\n  t.max_y_offset as vmax,\n  NULL::float as relative_hmin,\n  t.horizontal_percentage_scrolled as relative_hmax,\n  NULL::float as relative_vmin,\n  t.vertical_percentage_scrolled as relative_vmax,\n  t.last_item_index as last_list_item_index,\n  t.items_count as list_items_count,\n  t.list_items_percentage_scrolled\nfrom unified_screen_summary_metrics as t;",
      "cellId": 6,
      "useDatabase": "memory"
    },
    {
      "query": "-- unified views\nDROP VIEW IF EXISTS unified_views;\ncreate view unified_views AS\nwith prep as (\n  select\n    -- event categorization fields\n    ev.event_name,\n    ev.user_id,\n    ev.user_identifier,\n    ev.network_userid,\n    -- timestamp fields\n    ev.dvce_created_tstamp,\n    ev.collector_tstamp,\n    ev.derived_tstamp,\n    ev.derived_tstamp as start_tstamp,\n    -- geo fields\n    ev.geo_country,\n    ev.geo_region,\n    ev.geo_region_name,\n    ev.geo_city,\n    ev.geo_zipcode,\n    ev.geo_latitude,\n    ev.geo_longitude,\n    ev.geo_timezone,\n    ev.user_ipaddress,\n    -- device fields\n    ev.app_id,\n    ev.platform,\n    ev.device_identifier,\n    ev.device_category,\n    ev.device_session_index,\n    ev.os_version,\n    ev.os_type,\n    ev.screen_resolution,\n    -- marketing fields\n    ev.mkt_medium,\n    ev.mkt_source,\n    ev.mkt_term,\n    ev.mkt_content,\n    ev.mkt_campaign,\n    ev.mkt_clickid,\n    ev.mkt_network,\ncase\n   when lower(trim(\n      mkt_source\n)) = ''direct'' and lower(trim(\n      mkt_medium\n)) in (''not set'', ''none'') then ''Direct''\n   when lower(trim(   \n      mkt_medium\n)) like ''%cross-network%'' then ''Cross-network''\n   when lower(trim(\n      mkt_medium)) SIMILAR TO ''^(.*cp.*|ppc|retargeting|paid.*)$'' then\n      case\n         when upper(NULL) = ''SOURCE_CATEGORY_SHOPPING''\n            or lower(trim(mkt_campaign)) SIMILAR TO ''^(.*(([^a-df-z]|^)shop|shopping).*)$'' then ''Paid Shopping''\n         when upper(NULL) = ''SOURCE_CATEGORY_SEARCH'' then ''Paid Search''\n         when upper(NULL) = ''SOURCE_CATEGORY_SOCIAL'' then ''Paid Social''\n         when upper(NULL) = ''SOURCE_CATEGORY_VIDEO'' then ''Paid Video''\n         else ''Paid Other''\n      end\n   when lower(trim(mkt_medium\n)) in (''display'', ''banner'', ''expandable'', ''intersitial'', ''cpm'') then ''Display''\n   when upper(NULL) = ''SOURCE_CATEGORY_SHOPPING''\n      or lower(trim(mkt_campaign)) SIMILAR TO ''^(.*(([^a-df-z]|^)shop|shopping).*)$'' then ''Organic Shopping''\n   when upper(NULL) = ''SOURCE_CATEGORY_SOCIAL'' or lower(trim(\n      mkt_medium\n)) in (''social'', ''social-network'', ''sm'', ''social network'', ''social media'') then ''Organic Social''\n   when upper(NULL) = ''SOURCE_CATEGORY_VIDEO''\n      or lower(trim(mkt_medium)) SIMILAR TO ''^(.*video.*)$'' then ''Organic Video''\n   when upper(NULL) = ''SOURCE_CATEGORY_SEARCH'' or lower(trim(\n      mkt_medium\n)) = ''organic'' then ''Organic Search''\n   when lower(trim(\n      mkt_medium\n)) in (''referral'', ''app'', ''link'') then ''Referral''\n   when lower(trim(\n      mkt_source\n)) in (''email'', ''e-mail'', ''e_mail'', ''e mail'') or lower(trim(\n      mkt_medium\n)) in (''email'', ''e-mail'', ''e_mail'', ''e mail'') then ''Email''\n   when lower(trim(\n      mkt_medium\n)) = ''affiliate'' then ''Affiliates''\n   when lower(trim(\n      mkt_medium\n)) = ''audio'' then ''Audio''\n   when lower(trim(\n      mkt_source\n)) = ''sms'' or lower(trim(\n      mkt_medium\n)) = ''sms'' then ''SMS''\n   when lower(trim(\n      mkt_medium\n)) like ''%push'' or lower(trim(mkt_medium)) SIMILAR TO ''.*(mobile|notification).*'' or lower(trim(\n      mkt_source\n)) = ''firebase'' then ''Mobile Push Notifications''\n   else ''Unassigned''\nend\n as default_channel_group,\n    -- webpage / referer / browser fields\n    ev.page_url,\n    ev.page_referrer,\n    ev.refr_medium,\n    ev.refr_source,\n    ev.refr_term,\n    ev.useragent\n    , view_id\n    , session_identifier\n    , event_id\n      , ev.br_lang\n      , ev.br_viewwidth\n      , ev.br_viewheight\n      , ev.br_renderengine\n      , ev.doc_width\n      , ev.doc_height\n      , ev.page_title\n      , ev.page_urlscheme\n      , ev.page_urlhost\n      , ev.page_urlpath\n      , ev.page_urlquery\n      , ev.page_urlfragment\n      , ev.refr_urlscheme\n      , ev.refr_urlhost\n      , ev.refr_urlpath\n      , ev.refr_urlquery\n      , ev.refr_urlfragment\n      , ev.os_timezone\n      , ''other'' as content_group\n      , coalesce(cast(ev.browser__color_depth as TEXT),null) as br_colordepth\n  , ev.session__previous_session_id\n  , ev.screen_view__name\n  , ev.screen_view__previous_id\n  , ev.screen_view__previous_name\n  , ev.screen_view__previous_type\n  , ev.screen_view__transition_type\n  , ev.screen_view__type\n      -- updated with mapping as part of post hook on derived page_views table\n      , cast(ev.user_identifier as TEXT) as stitched_user_id\n    , ev.iab__category\n    , ev.iab__primary_impact\n    , ev.iab__reason\n    , ev.iab__spider_or_robot\n    , ev.yauaa__device_class\n    , ev.yauaa__agent_class\n    , ev.yauaa__agent_name\n    , ev.yauaa__agent_name_version\n    , ev.yauaa__agent_name_version_major\n    , ev.yauaa__agent_version\n    , ev.yauaa__agent_version_major\n    , ev.yauaa__device_brand\n    , ev.yauaa__device_name\n    , ev.yauaa__device_version\n    , ev.yauaa__layout_engine_class\n    , ev.yauaa__layout_engine_name\n    , ev.yauaa__layout_engine_name_version\n    , ev.yauaa__layout_engine_name_version_major\n    , ev.yauaa__layout_engine_version\n    , ev.yauaa__layout_engine_version_major\n    , ev.yauaa__operating_system_class\n    , ev.yauaa__operating_system_name\n    , ev.yauaa__operating_system_name_version\n    , ev.yauaa__operating_system_version\n      , ev.ua__useragent_family\n      , ev.ua__useragent_major\n      , ev.ua__useragent_minor\n      , ev.ua__useragent_patch\n      , ev.ua__useragent_version\n      , ev.ua__os_family\n      , ev.ua__os_major\n      , ev.ua__os_minor\n      , ev.ua__os_patch\n      , ev.ua__os_patch_minor\n      , ev.ua__os_version\n      , ev.ua__device_family\n  , ev.app__build\n  , ev.app__version\n    , ev.geo__latitude\n    , ev.geo__longitude\n    , ev.geo__latitude_longitude_accuracy\n    , ev.geo__altitude\n    , ev.geo__altitude_accuracy\n    , ev.geo__bearing\n    , ev.geo__speed\n      , ev.screen__id\n      , ev.screen__name\n      , ev.screen__activity\n      , ev.screen__fragment\n      , ev.screen__top_view_controller\n      , ev.screen__type\n      , ev.screen__view_controller\n    , ev.mobile__device_manufacturer\n    , ev.mobile__device_model\n    , ev.mobile__os_type\n    , ev.mobile__os_version\n    , ev.mobile__android_idfa\n    , ev.mobile__apple_idfa\n    , ev.mobile__apple_idfv\n    , ev.mobile__carrier\n    , ev.mobile__open_idfa\n    , ev.mobile__network_technology\n    , ev.mobile__network_type\n    , ev.mobile__physical_memory\n    , ev.mobile__system_available_memory\n    , ev.mobile__app_available_memory\n    , ev.mobile__battery_level\n    , ev.mobile__battery_state\n    , ev.mobile__low_power_mode\n    , ev.mobile__available_storage\n    , ev.mobile__total_storage\n    , ev.mobile__is_portrait\n    , ev.mobile__resolution\n    , ev.mobile__scale\n    , ev.mobile__language\n    , ev.mobile__app_set_id\n    , ev.mobile__app_set_id_scope\n      ,ev.v_collector\n      ,event_id as event_id2\n\n    from unified_events as ev\n\n    -- removes ga4 source categories\n    where ev.event_name in (''page_view'', ''screen_view'')\n    and ev.view_id is not null\n    and coalesce(iab__spider_or_robot, False ) = False\n      qualify row_number() over (partition by ev.view_id order by ev.derived_tstamp, ev.dvce_created_tstamp) = 1\n    \n),\nview_aggs as (\n  select \n    view_id\n    , session_identifier\n      , \n    from unified_events as ev\n    where 1=1 \n    and coalesce(iab__spider_or_robot, False ) = False\n    group by 1, 2\n),\nview_events as (\n  select\n    p.*\n    , row_number() over (partition by p.session_identifier order by p.derived_tstamp, p.dvce_created_tstamp, p.event_id) AS view_in_session_index\n    , coalesce(t.end_tstamp, p.derived_tstamp) as end_tstamp -- only page views with pings will have a row in table t\n      , coalesce(t.engaged_time_in_s, 0) as engaged_time_in_s -- where there are no pings, engaged time is 0.\n      , coalesce(\n        t.absolute_time_in_s,\n        datediff(\n        ''second'',\n        p.derived_tstamp,\n        coalesce(t.end_tstamp, p.derived_tstamp)\n        )\n      ) as absolute_time_in_s\n      , sd.hmax as horizontal_pixels_scrolled\n      , sd.vmax as vertical_pixels_scrolled\n      , sd.relative_hmax as horizontal_percentage_scrolled\n      , sd.relative_vmax as vertical_percentage_scrolled\n    , \n    current_timestamp as model_tstamp\n  from prep p\n  left join unified_pv_engaged_time t\n  on p.view_id = t.view_id and p.session_identifier = t.session_identifier\n  left join unified_pv_scroll_depth sd\n  on p.view_id = sd.view_id and p.session_identifier = sd.session_identifier\n)\nselect\n    -- event categorization fields\n    pve.view_id\n    , pve.event_name\n    , pve.event_id\n    , pve.session_identifier\n    , pve.view_in_session_index\n    , max(pve.view_in_session_index) over (partition by pve.session_identifier) as views_in_session\n    -- user id fields\n    , pve.user_id\n    , pve.user_identifier\n    , pve.stitched_user_id\n    , pve.network_userid\n    -- timestamp fields\n    , pve.dvce_created_tstamp\n    , pve.collector_tstamp\n    , pve.derived_tstamp\n    , pve.derived_tstamp as start_tstamp\n    , pve.end_tstamp -- only page views with pings will have a row in table t\n    , pve.model_tstamp\n    -- device fields\n    , pve.app_id\n    , pve.platform\n    , pve.device_identifier\n    , pve.device_category\n    , pve.device_session_index\n    , pve.os_version\n    , pve.os_type\n    , pve.mobile__device_manufacturer\n    , pve.mobile__device_model\n    , pve.mobile__os_type\n    , pve.mobile__os_version\n    , pve.mobile__android_idfa\n    , pve.mobile__apple_idfa\n    , pve.mobile__apple_idfv\n    , pve.mobile__carrier\n    , pve.mobile__open_idfa\n    , pve.mobile__network_technology\n    , pve.mobile__network_type\n    , pve.mobile__physical_memory\n    , pve.mobile__system_available_memory\n    , pve.mobile__app_available_memory\n    , pve.mobile__battery_level\n    , pve.mobile__battery_state\n    , pve.mobile__low_power_mode\n    , pve.mobile__available_storage\n    , pve.mobile__total_storage\n    , pve.mobile__is_portrait\n    , pve.mobile__resolution\n    , pve.mobile__scale\n    , pve.mobile__language\n    , pve.mobile__app_set_id\n    , pve.mobile__app_set_id_scope\n    , pve.screen_resolution\n    -- geo fields\n    , pve.geo_country\n    , pve.geo_region\n    , pve.geo_region_name\n    , pve.geo_city\n    , pve.geo_zipcode\n    , pve.geo_latitude\n    , pve.geo_longitude\n    , pve.geo_timezone\n    , pve.user_ipaddress\n    -- engagement fields\n      , pve.engaged_time_in_s -- where there are no pings, engaged time is 0.\n      , pve.absolute_time_in_s\n      , pve.horizontal_pixels_scrolled\n      , pve.vertical_pixels_scrolled\n      , pve.horizontal_percentage_scrolled\n      , pve.vertical_percentage_scrolled\n    -- marketing fields\n    , pve.mkt_medium\n    , pve.mkt_source\n    , pve.mkt_term\n    , pve.mkt_content\n    , pve.mkt_campaign\n    , pve.mkt_clickid\n    , pve.mkt_network\n    , pve.default_channel_group\n    -- webpage / referer / browser fields\n    , pve.page_url\n    , pve.page_referrer\n    , pve.refr_medium\n    , pve.refr_source\n    , pve.refr_term\n      , br_colordepth\n      , pve.br_lang\n      , pve.br_viewwidth\n      , pve.br_viewheight\n      , pve.br_renderengine\n      , pve.doc_width\n      , pve.doc_height\n      , pve.page_title\n      , pve.page_urlscheme\n      , pve.page_urlhost\n      , pve.page_urlpath\n      , pve.page_urlquery\n      , pve.page_urlfragment\n      , pve.refr_urlscheme\n      , pve.refr_urlhost\n      , pve.refr_urlpath\n      , pve.refr_urlquery\n      , pve.refr_urlfragment\n      , pve.os_timezone\n      , content_group\n    -- iab enrichment fields\n    , pve.iab__category\n    , pve.iab__primary_impact\n    , pve.iab__reason\n    , pve.iab__spider_or_robot\n    -- yauaa enrichment fields\n    , pve.yauaa__device_class\n    , pve.yauaa__agent_class\n    , pve.yauaa__agent_name\n    , pve.yauaa__agent_name_version\n    , pve.yauaa__agent_name_version_major\n    , pve.yauaa__agent_version\n    , pve.yauaa__agent_version_major\n    , pve.yauaa__device_brand\n    , pve.yauaa__device_name\n    , pve.yauaa__device_version\n    , pve.yauaa__layout_engine_class\n    , pve.yauaa__layout_engine_name\n    , pve.yauaa__layout_engine_name_version\n    , pve.yauaa__layout_engine_name_version_major\n    , pve.yauaa__layout_engine_version\n    , pve.yauaa__layout_engine_version_major\n    , pve.yauaa__operating_system_class\n    , pve.yauaa__operating_system_name\n    , pve.yauaa__operating_system_name_version\n    , pve.yauaa__operating_system_version\n    -- ua parser enrichment fields\n      , pve.ua__useragent_family\n      , pve.ua__useragent_major\n      , pve.ua__useragent_minor\n      , pve.ua__useragent_patch\n      , pve.ua__useragent_version\n      , pve.ua__os_family\n      , pve.ua__os_major\n      , pve.ua__os_minor\n      , pve.ua__os_patch\n      , pve.ua__os_patch_minor\n      , pve.ua__os_version\n      , pve.ua__device_family\n    -- mobile only\n  , pve.session__previous_session_id\n  , pve.screen_view__name\n  , pve.screen_view__previous_id\n  , pve.screen_view__previous_name\n  , pve.screen_view__previous_type\n  , pve.screen_view__transition_type\n  , pve.screen_view__type\n  , pve.app__build\n  , pve.app__version\n    , pve.geo__latitude\n    , pve.geo__longitude\n    , pve.geo__latitude_longitude_accuracy\n    , pve.geo__altitude\n    , pve.geo__altitude_accuracy\n    , pve.geo__bearing\n    , pve.geo__speed\n      , pve.screen__fragment\n      , pve.screen__top_view_controller\n      , pve.screen__view_controller\n    , pve.useragent\n        , pve.v_collector\nfrom view_events pve\n  left join view_aggs a on pve.session_identifier = a.session_identifier and pve.view_id = a.view_id;\n",
      "cellId": 7,
      "useDatabase": "memory"
    },
    {
      "query": "-- unified sessions\nDROP VIEW IF EXISTS unified_sessions;\nCREATE VIEW unified_sessions AS\nWITH session_firsts as (\n    select\n    -- event categorization fields\n    ev.event_name,\n    ev.user_id,\n    ev.user_identifier,\n    ev.network_userid,\n    -- timestamp fields\n    ev.dvce_created_tstamp,\n    ev.collector_tstamp,\n    ev.derived_tstamp,\n    ev.derived_tstamp as start_tstamp,\n    -- geo fields\n    ev.geo_country,\n    ev.geo_region,\n    ev.geo_region_name,\n    ev.geo_city,\n    ev.geo_zipcode,\n    ev.geo_latitude,\n    ev.geo_longitude,\n    ev.geo_timezone,\n    ev.user_ipaddress,\n    -- device fields\n    ev.app_id,\n    ev.platform,\n    ev.device_identifier,\n    ev.device_category,\n    ev.device_session_index,\n    ev.os_version,\n    ev.os_type,\n    ev.screen_resolution,\n    -- marketing fields\n    ev.mkt_medium,\n    ev.mkt_source,\n    ev.mkt_term,\n    ev.mkt_content,\n    ev.mkt_campaign,\n    ev.mkt_clickid,\n    ev.mkt_network,\nNULL as default_channel_group,\n\n    -- webpage / referer / browser fields\n    ev.page_url,\n    ev.page_referrer,\n    ev.refr_medium,\n    ev.refr_source,\n    ev.refr_term,\n    ev.useragent\n        , session_identifier\n      , ev.br_lang\n      , ev.br_viewwidth\n      , ev.br_viewheight\n      , ev.br_renderengine\n      , ev.doc_width\n      , ev.doc_height\n      , ev.page_title\n      , ev.page_urlscheme\n      , ev.page_urlhost\n      , ev.page_urlpath\n      , ev.page_urlquery\n      , ev.page_urlfragment\n      , ev.refr_urlscheme\n      , ev.refr_urlhost\n      , ev.refr_urlpath\n      , ev.refr_urlquery\n      , ev.refr_urlfragment\n      , ev.os_timezone\n  , ev.session__previous_session_id\n  , ev.screen_view__name\n  , ev.screen_view__previous_id\n  , ev.screen_view__previous_name\n  , ev.screen_view__previous_type\n  , ev.screen_view__transition_type\n  , ev.screen_view__type\n          -- updated with mapping as part of post hook on derived sessions table\n          , cast(user_identifier as \n    TEXT\n) as stitched_user_id\n    , ev.iab__category\n    , ev.iab__primary_impact\n    , ev.iab__reason\n    , ev.iab__spider_or_robot\n\n    , ev.yauaa__device_class\n    , ev.yauaa__agent_class\n    , ev.yauaa__agent_name\n    , ev.yauaa__agent_name_version\n    , ev.yauaa__agent_name_version_major\n    , ev.yauaa__agent_version\n    , ev.yauaa__agent_version_major\n    , ev.yauaa__device_brand\n    , ev.yauaa__device_name\n    , ev.yauaa__device_version\n    , ev.yauaa__layout_engine_class\n    , ev.yauaa__layout_engine_name\n    , ev.yauaa__layout_engine_name_version\n    , ev.yauaa__layout_engine_name_version_major\n    , ev.yauaa__layout_engine_version\n    , ev.yauaa__layout_engine_version_major\n    , ev.yauaa__operating_system_class\n    , ev.yauaa__operating_system_name\n    , ev.yauaa__operating_system_name_version\n    , ev.yauaa__operating_system_version\n\n      , ev.ua__useragent_family\n      , ev.ua__useragent_major\n      , ev.ua__useragent_minor\n      , ev.ua__useragent_patch\n      , ev.ua__useragent_version\n      , ev.ua__os_family\n      , ev.ua__os_major\n      , ev.ua__os_minor\n      , ev.ua__os_patch\n      , ev.ua__os_patch_minor\n      , ev.ua__os_version\n      , ev.ua__device_family\n\n  , NULL AS app__build\n  , NULL AS app__version\n\n    , ev.geo__latitude\n    , ev.geo__longitude\n    , ev.geo__latitude_longitude_accuracy\n    , ev.geo__altitude\n    , ev.geo__altitude_accuracy\n    , ev.geo__bearing\n    , ev.geo__speed\n    , g.name as geo_country_name \n    , g.region as geo_continent\n    , l.name as br_lang_name\n\n      , ev.screen__id\n      , ev.screen__name\n      , ev.screen__activity\n      , ev.screen__fragment\n      , ev.screen__top_view_controller\n      , ev.screen__type\n      , ev.screen__view_controller\n\n    , ev.mobile__device_manufacturer\n    , ev.mobile__device_model\n    , ev.mobile__os_type\n    , ev.mobile__os_version\n    , ev.mobile__android_idfa\n    , ev.mobile__apple_idfa\n    , ev.mobile__apple_idfv\n    , ev.mobile__carrier\n    , ev.mobile__open_idfa\n    , ev.mobile__network_technology\n    , ev.mobile__network_type\n    , ev.mobile__physical_memory\n    , ev.mobile__system_available_memory\n    , ev.mobile__app_available_memory\n    , ev.mobile__battery_level\n    , ev.mobile__battery_state\n    , ev.mobile__low_power_mode\n    , ev.mobile__available_storage\n    , ev.mobile__total_storage\n    , ev.mobile__is_portrait\n    , ev.mobile__resolution\n    , ev.mobile__scale\n    , ev.mobile__language\n    , ev.mobile__app_set_id\n    , ev.mobile__app_set_id_scope\n        , \n  regexp_extract(page_urlquery, ''utm_source_platform=([^?&#]*)'', 1)\n as mkt_source_platform\n            ,ev.event_id\n\n    from unified_events ev\n    LEFT JOIN\n    unified_dim_rfc_5646_language_mapping l ON lower(ev.br_lang) = lower(l.lang_tag)\n    LEFT JOIN\n    unified_dim_geo_country_mapping g ON lower(ev.geo_country) = lower(g.alpha_2)\n    -- ga seed data is excluded\n  \n    -- no join to GA seed data, ISO data\n    where event_name in (''page_ping'', ''page_view'', ''screen_view'')\n    and view_id is not null\n    and coalesce(iab__spider_or_robot, False ) = False\n      qualify row_number() over (partition by session_identifier order by derived_tstamp) = 1\n    \n),\nsession_lasts as (\n    select\n      ev.event_name as last_event_name,\n      ev.geo_country as last_geo_country,\n      ev.geo_city as last_geo_city,\n      ev.geo_region_name as last_geo_region_name,\n      g.name as last_geo_country_name,\n      g.region as last_geo_continent,\n      ev.page_url as last_page_url,\n        ev.page_title as last_page_title,\n        ev.page_urlscheme as last_page_urlscheme,\n        ev.page_urlhost as last_page_urlhost,\n        ev.page_urlpath as last_page_urlpath,\n        ev.page_urlquery as last_page_urlquery,\n        ev.page_urlfragment as last_page_urlfragment,\n        br_lang as last_br_lang,\n        l.name as last_br_lang_name, -- no support for language name\n        ev.screen_view__name as last_screen_view__name,\n        ev.screen_view__transition_type as last_screen_view__transition_type,\n        ev.screen_view__type as last_screen_view__type,\n        session_identifier\n    from unified_events ev\n      LEFT JOIN\n    unified_dim_rfc_5646_language_mapping l ON lower(ev.br_lang) = lower(l.lang_tag)\n      LEFT JOIN\n    unified_dim_geo_country_mapping g ON lower(ev.geo_country) = lower(g.alpha_2)\n    where\n        event_name in (''page_view'', ''screen_view'')\n        and view_id is not null\n    and coalesce(iab__spider_or_robot, False ) = False\n      qualify row_number() over (partition by session_identifier order by derived_tstamp desc) = 1\n    \n),\nsession_aggs as (\n    select\n      session_identifier\n      , min(derived_tstamp) as start_tstamp\n      , max(derived_tstamp) as end_tstamp\n      , count(*) as total_events\n      , count(distinct view_id) as views\n          , \n      histogram(event_name) AS event_counts\n      ,NULL as event_counts_string, -- TODO, consider whether this is needed or not?\n     (GETVARIABLE(''heartbeat'') * (\n              -- number of (unqiue in heartbeat increment) pages pings following a page ping (gap of heartbeat)\n              count(distinct case when event_name = ''page_ping'' and view_id is not null then\n                          -- need to get a unique list of floored time PER page view, so create a dummy surrogate key...\n                          view_id || cast(floor(epoch(dvce_created_tstamp)/GETVARIABLE(''heartbeat'')) as TEXT)\n                      else null end) - count(distinct case when event_name = ''page_ping'' and view_id is not null then view_id else null end)\n                            ))  +\n                            -- number of page pings following a page view (or no event) (gap of min visit length)\n                            (count(distinct case when event_name = ''page_ping'' and view_id is not null then view_id else null end) * GETVARIABLE(''min_visit_length'')) as engaged_time_in_s_web\n      , datediff(''second'', min(derived_tstamp), max(derived_tstamp)) as absolute_time_in_s\n        -- TODO, count(distinct case when event_name = ''application_error'' then 1 end) as app_errors\n        -- , count(distinct case when app_error__is_fatal then event_id end) as fatal_app_errors\n        -- , count(distinct screen_view__name) as screen_names_viewed\n    from unified_events\n    where 1 = 1\n    and coalesce(iab__spider_or_robot, False ) = False\n    group by session_identifier\n),\nsession_aggs_with_engaged_time as (\n    select a.*\n      , a.engaged_time_in_s_web as engaged_time_in_s\n    from session_aggs a\n),\niso_639_3_deduped AS (\n  SELECT\n    *,\n    row_number() over (partition by iso_639_3_code ORDER BY name) as row_num\n  FROM\n    unified_dim_iso_639_3\n),\nsession_convs as (\n    select\n        session_identifier\n        -- TODO: consider removing these examples?\n,COUNT(CASE WHEN event_name = ''page_view'' THEN 1 ELSE null END) AS cv_view_page_volume\n,SUM(CASE WHEN event_name = ''page_view'' THEN coalesce(tr_total_base, 0.5) ELSE 0 END) AS cv_view_page_total\n,MIN(CASE WHEN event_name = ''page_view'' THEN derived_tstamp ELSE null END) AS cv_view_page_first_conversion\n,CAST(MAX(CASE WHEN event_name = ''page_view'' THEN 1 ELSE 0 END) AS BOOLEAN) AS cv_view_page_converted\n          from unified_events\n          where 1 = 1\n    and coalesce(iab__spider_or_robot, False ) = False\n        group by session_identifier\n)\nselect\n  -- event categorization fields\n  f.event_name as first_event_name\n  , l.last_event_name\n  , f.session_identifier\n    -- , f.session__previous_session_id\n  -- user id fields\n  , f.user_id\n  , f.user_identifier\n  , f.stitched_user_id\n  , f.network_userid\n  -- timestamp fields\n  -- when the session starts with a ping we need to add the min visit length to get when the session actually started\n  , case when f.event_name = ''page_ping'' then \n    a.start_tstamp - INTERVAL (GETVARIABLE(''min_visit_length'')) SECOND\n else a.start_tstamp end as start_tstamp\n  , a.end_tstamp -- only page views with pings will have a row in table t\n  , \n  current_timestamp as model_tstamp\n  -- device fields\n  , f.app_id\n  , f.platform\n  , f.device_identifier\n  , f.device_category\n  , f.device_session_index\n  , f.os_version\n  , f.os_type\n    , f.os_timezone\n  , f.screen_resolution\n\n    , f.mobile__device_manufacturer\n    , f.mobile__device_model\n    , f.mobile__os_type\n    , f.mobile__os_version\n    , f.mobile__android_idfa\n    , f.mobile__apple_idfa\n    , f.mobile__apple_idfv\n    , f.mobile__carrier\n    , f.mobile__open_idfa\n    , f.mobile__network_technology\n    , f.mobile__network_type\n    , f.mobile__physical_memory\n    , f.mobile__system_available_memory\n    , f.mobile__app_available_memory\n    , f.mobile__battery_level\n    , f.mobile__battery_state\n    , f.mobile__low_power_mode\n    , f.mobile__available_storage\n    , f.mobile__total_storage\n    , f.mobile__is_portrait\n    , f.mobile__resolution\n    , f.mobile__scale\n    , f.mobile__language\n    , f.mobile__app_set_id\n    , f.mobile__app_set_id_scope\n    , coalesce(iso_639_2t_2_char.name, iso_639_2t_3_char.name, iso_639_3.name, f.mobile__language) as mobile_language_name\n  \n  -- geo fields\n  , f.geo_country as first_geo_country\n  , f.geo_region_name as first_geo_region_name\n  , f.geo_city as first_geo_city\n  , f.geo_country_name as first_geo_country_name\n  , f.geo_continent as first_geo_continent\n\n  , case when l.last_geo_country is null then coalesce(l.last_geo_country, f.geo_country) else l.last_geo_country end as last_geo_country\n  , case when l.last_geo_country is null then coalesce(l.last_geo_region_name, f.geo_region_name) else l.last_geo_region_name end as last_geo_region_name\n  , case when l.last_geo_country is null then coalesce(l.last_geo_city, f.geo_city) else l.last_geo_city end as last_geo_city\n  , case when l.last_geo_country is null then coalesce(l.last_geo_country_name,f.geo_country_name) else l.last_geo_country_name end as last_geo_country_name\n  , case when l.last_geo_country is null then coalesce(l.last_geo_continent, f.geo_continent) else l.last_geo_continent end as last_geo_continent\n\n  , f.geo_zipcode\n  , f.geo_latitude\n  , f.geo_longitude\n  , f.geo_timezone\n  , f.user_ipaddress\n\n  -- engagement fields\n  , a.views\n  , a.event_counts\n  , JSON(a.event_counts) AS event_counts_string\n  , a.total_events\n  , coalesce(\n    case when \n    views >= 2\n      or engaged_time_in_s / 10 >= 2\n        or cv_view_page_converted THEN true end\n, false) as is_engaged\n  -- when the session starts with a ping we need to add the min visit length to get when the session actually started\n    , a.engaged_time_in_s\n  , a.absolute_time_in_s + case when f.event_name = ''page_ping'' then GETVARIABLE(''min_visit_length'') else 0 end as absolute_time_in_s\n    -- TODO, a.screen_names_viewed\n  -- marketing fields\n  , f.mkt_medium\n  , f.mkt_source\n  , f.mkt_term\n  , f.mkt_content\n  , f.mkt_campaign\n  , f.mkt_clickid\n  , f.mkt_network\n  , f.default_channel_group\n  , mkt_source_platform\n\n  -- webpage / referrer / browser fields\n  , f.page_url as first_page_url\n  , case when l.last_page_url is null then coalesce(l.last_page_url, f.page_url) else l.last_page_url end as last_page_url\n  , f.page_referrer\n  , f.refr_medium\n  , f.refr_source\n  , f.refr_term\n    , f.page_title as first_page_title\n    , f.page_urlscheme as first_page_urlscheme\n    , f.page_urlhost as first_page_urlhost\n    , f.page_urlpath as first_page_urlpath\n    , f.page_urlquery as first_page_urlquery\n    , f.page_urlfragment as first_page_urlfragment\n    -- only take the first value when the last is genuinely missing (base on url as has to always be populated)\n    , case when l.last_page_url is null then coalesce(l.last_page_title, f.page_title) else l.last_page_title end as last_page_title\n    , case when l.last_page_url is null then coalesce(l.last_page_urlscheme, f.page_urlscheme) else l.last_page_urlscheme end as last_page_urlscheme\n    , case when l.last_page_url is null then coalesce(l.last_page_urlhost, f.page_urlhost) else l.last_page_urlhost end as last_page_urlhost\n    , case when l.last_page_url is null then coalesce(l.last_page_urlpath, f.page_urlpath) else l.last_page_urlpath end as last_page_urlpath\n    , case when l.last_page_url is null then coalesce(l.last_page_urlquery, f.page_urlquery) else l.last_page_urlquery end as last_page_urlquery\n    , case when l.last_page_url is null then coalesce(l.last_page_urlfragment, f.page_urlfragment) else l.last_page_urlfragment end as last_page_urlfragment\n    , f.refr_urlscheme\n    , f.refr_urlhost\n    , f.refr_urlpath\n    , f.refr_urlquery\n    , f.refr_urlfragment\n    , f.br_renderengine\n    , f.br_lang as first_br_lang\n    , f.br_lang_name AS first_br_lang_name\n    , case when l.last_br_lang is null then coalesce(l.last_br_lang, f.br_lang) else l.last_br_lang end as last_br_lang\n    , case when l.last_br_lang is null then coalesce(l.last_br_lang_name, f.br_lang_name) else l.last_br_lang_name end as last_br_lang_name\n\n  \n  -- iab enrichment fields\n    , f.iab__category\n    , f.iab__primary_impact\n    , f.iab__reason\n    , f.iab__spider_or_robot\n\n  -- yauaa enrichment fields\n    , f.yauaa__device_class\n    , f.yauaa__agent_class\n    , f.yauaa__agent_name\n    , f.yauaa__agent_name_version\n    , f.yauaa__agent_name_version_major\n    , f.yauaa__agent_version\n    , f.yauaa__agent_version_major\n    , f.yauaa__device_brand\n    , f.yauaa__device_name\n    , f.yauaa__device_version\n    , f.yauaa__layout_engine_class\n    , f.yauaa__layout_engine_name\n    , f.yauaa__layout_engine_name_version\n    , f.yauaa__layout_engine_name_version_major\n    , f.yauaa__layout_engine_version\n    , f.yauaa__layout_engine_version_major\n    , f.yauaa__operating_system_class\n    , f.yauaa__operating_system_name\n    , f.yauaa__operating_system_name_version\n    , f.yauaa__operating_system_version\n\n  -- -- ua parser enrichment fields\n      , f.ua__useragent_family\n      , f.ua__useragent_major\n      , f.ua__useragent_minor\n      , f.ua__useragent_patch\n      , f.ua__useragent_version\n      , f.ua__os_family\n      , f.ua__os_major\n      , f.ua__os_minor\n      , f.ua__os_patch\n      , f.ua__os_patch_minor\n      , f.ua__os_version\n      , f.ua__device_family\n\n  -- mobile only  \n    , f.screen_view__name as first_screen_view__name\n    , f.screen_view__type as first_screen_view__type\n    , case when l.last_screen_view__name is null then coalesce(l.last_screen_view__name, f.screen_view__name) else l.last_screen_view__name end as last_screen_view__name\n    , case when l.last_screen_view__transition_type is null then coalesce(l.last_screen_view__transition_type, f.screen_view__transition_type) else l.last_screen_view__transition_type end as last_screen_view__transition_type\n    , case when l.last_screen_view__type is null then coalesce(l.last_screen_view__type, f.screen_view__type) else l.last_screen_view__type end as last_screen_view__type\n    , f.screen_view__previous_id\n    , f.screen_view__previous_name\n    , f.screen_view__previous_type\n\n    , f.geo__latitude as first_geo__latitude \n    , f.geo__longitude as first_geo__longitude \n    , f.geo__latitude_longitude_accuracy as first_geo__latitude_longitude_accuracy \n    , f.geo__altitude as first_geo__altitude \n    , f.geo__altitude_accuracy as first_geo__altitude_accuracy \n    , f.geo__bearing as first_geo__bearing \n    , f.geo__speed as first_geo__speed \n\n    , f.screen__fragment\n    , f.screen__top_view_controller\n    , f.screen__view_controller  \n  , f.useragent\n  -- no support for passthrough fields\n          , f.event_id\n \nfrom session_firsts f\n\nleft join session_lasts l\non f.session_identifier = l.session_identifier\nleft join session_aggs_with_engaged_time a\non f.session_identifier = a.session_identifier\nleft join session_convs d on f.session_identifier = d.session_identifier\n-- if the language uses a two letter code we can match on that  \nleft join unified_dim_iso_639_2t iso_639_2t_2_char on lower(f.mobile__language) = lower(iso_639_2t_2_char.iso_639_1_code)\n-- if the language uses a three letter code we can match on that\nleft join unified_dim_iso_639_2t iso_639_2t_3_char on lower(f.mobile__language) = lower(iso_639_2t_3_char.iso_639_2t_code)\n  -- A fallback to the three letter code, with a more complete list, we first try to join on the other dataset the three letter code\n  -- in order to get a language name that will match the mapping of the two letter code\n  left join iso_639_3_deduped iso_639_3 on lower(f.mobile__language) = lower(iso_639_3.iso_639_3_code)\n    and iso_639_3.row_num = 1",
      "cellId": 8,
      "useDatabase": "memory"
    },
    {
      "query": "-- alright, it is now time for users!\nDROP VIEW IF EXISTS unified_users_sessions;\ncreate view unified_users_sessions AS\nselect\n  a.*,\n  min(a.start_tstamp) over(partition by a.user_identifier) as user_start_tstamp,\n  max(a.end_tstamp) over(partition by a.user_identifier) as user_end_tstamp,\n  max(case when platform = ''web'' then true else false end) over(partition by user_identifier) as on_web,\n  max(case when platform <> ''web'' then true else false end) over(partition by user_identifier) as on_mobile\nfrom unified_sessions a;\n",
      "cellId": 9,
      "useDatabase": "memory"
    },
    {
      "query": "-- aggs\nDROP VIEW IF EXISTS unified_users_aggs;\ncreate view if not exists unified_users_aggs AS\nselect\n  user_identifier\n  -- time\n  , user_start_tstamp as start_tstamp\n  , user_end_tstamp as end_tstamp\n  -- first/last session. Max to resolve edge case with multiple sessions with the same start/end tstamp\n  , max(case when start_tstamp = user_start_tstamp then session_identifier end) as first_session_identifier\n  , max(case when end_tstamp = user_end_tstamp then session_identifier end) as last_session_identifier\n  -- engagement\n  , sum(views) as views\n  , count(distinct session_identifier) as sessions\n  , count(distinct date_trunc(''day'', start_tstamp)) as active_days\n    , sum(engaged_time_in_s) as engaged_time_in_s\n  , sum(absolute_time_in_s) as absolute_time_in_s\nfrom unified_users_sessions\ngroup by 1,2,3;",
      "cellId": 10,
      "useDatabase": "memory"
    },
    {
      "query": "-- user lasts\nDROP VIEW IF EXISTS unified_users_lasts;\ncreate view unified_users_lasts AS\nselect\n  a.user_identifier\n  , a.platform as last_platform\n  , os_type as last_os_type\n  , os_version as last_os_version\n  , screen_resolution as last_screen_resolution\n  , a.last_geo_country\n  , a.last_geo_country_name\n  , a.last_geo_continent\n  , a.last_geo_city\n  , a.last_geo_region_name\n  , a.last_page_url\n    , a.last_page_title\n    , a.last_page_urlscheme\n    , a.last_page_urlhost\n    , a.last_page_urlpath\n    , a.last_page_urlquery\n    , a.last_page_urlfragment\n\n    , a.last_br_lang\n    , a.last_br_lang_name\n    , a.last_screen_view__name\n    , a.last_screen_view__transition_type\n    , a.last_screen_view__type\n    , a.mobile__carrier as last_mobile__carrier\n    , a.mobile__device_manufacturer as last_mobile__device_manufacturer\n    , a.mobile__device_model as last_mobile__device_model\n    , a.event_id as last_event_id\n\nfrom unified_users_sessions a\n\ninner join unified_users_aggs b\non a.session_identifier = b.last_session_identifier;",
      "cellId": 11,
      "useDatabase": "memory"
    },
    {
      "query": "drop view if exists unified_users;\ncreate view unified_users AS select\n  -- user fields\n  a.user_id\n  , a.user_identifier\n  , a.network_userid\n    , cast(a.user_identifier as TEXT) as stitched_user_id\n  -- timestamp fields\n  , b.start_tstamp\n  , b.end_tstamp\n  , \n  current_timestamp as model_tstamp\n  -- device fields\n  , a.platform as first_platform\n  , c.last_platform\n  , cast(a.on_web as BOOLEAN) as on_web\n  , cast(a.on_mobile as BOOLEAN) as on_mobile\n  , c.last_screen_resolution\n  , c.last_os_type\n  , c.last_os_version\n    , a.mobile__device_manufacturer as first_mobile__device_manufacturer\n    , a.mobile__device_model as first_mobile__device_model\n    , a.mobile__carrier as first_mobile__carrier\n    , c.last_mobile__device_manufacturer\n    , c.last_mobile__device_model\n    , c.last_mobile__carrier\n    , a.mobile__os_type\n    , a.mobile__os_version\n    , a.mobile__android_idfa\n    , a.mobile__apple_idfa\n    , a.mobile__apple_idfv\n    , a.mobile__open_idfa\n    , a.mobile__network_technology\n    , a.mobile__network_type\n    , a.mobile__physical_memory\n    , a.mobile__system_available_memory\n    , a.mobile__app_available_memory\n    , a.mobile__battery_level\n    , a.mobile__battery_state\n    , a.mobile__low_power_mode\n    , a.mobile__available_storage\n    , a.mobile__total_storage\n    , a.mobile__is_portrait\n    , a.mobile__resolution\n    , a.mobile__scale\n    , a.mobile__language\n    , a.mobile__app_set_id\n    , a.mobile__app_set_id_scope\n    -- Derivative fields\n    , NULL AS mobile_language_name\n  -- geo fields\n  , a.first_geo_country\n  , a.first_geo_country_name\n  , a.first_geo_continent\n  , a.first_geo_city\n  , a.first_geo_region_name\n  , c.last_geo_country\n  , c.last_geo_country_name\n  , c.last_geo_continent\n  , c.last_geo_city\n  , c.last_geo_region_name\n  , a.geo_zipcode\n  , a.geo_latitude\n  , a.geo_longitude\n  , a.geo_timezone\n  -- engagement fields\n  , b.views\n  , b.sessions\n  , b.active_days\n    , b.engaged_time_in_s\n  , b.absolute_time_in_s\n    -- , b.screen_names_viewed\n  -- webpage / referer / browser fields\n  , a.page_referrer\n  , a.refr_medium\n  , a.refr_source\n  , a.refr_term\n    , a.first_page_title\n    , a.first_page_url\n    , a.first_page_urlscheme\n    , a.first_page_urlhost\n    , a.first_page_urlpath\n    , a.first_page_urlquery\n    , a.first_page_urlfragment\n    , a.first_br_lang\n    , a.first_br_lang_name\n    , c.last_page_title\n    , c.last_page_url\n    , c.last_page_urlscheme\n    , c.last_page_urlhost\n    , c.last_page_urlpath\n    , c.last_page_urlquery\n    , c.last_page_urlfragment\n    , c.last_br_lang\n    , c.last_br_lang_name\n    , a.refr_urlscheme\n    , a.refr_urlhost\n    , a.refr_urlpath\n    , a.refr_urlquery\n    , a.refr_urlfragment\n    , a.first_screen_view__name\n    , a.first_screen_view__type\n    , c.last_screen_view__name\n    , c.last_screen_view__transition_type\n    , c.last_screen_view__type\n  -- marketing fields\n  , a.mkt_medium\n  , a.mkt_source\n  , a.mkt_term\n  , a.mkt_content\n  , a.mkt_campaign\n  , a.mkt_clickid\n  , a.mkt_network\n  , a.mkt_source_platform\n  , a.default_channel_group\n    ,a.event_id as first_event_id\n    ,c.last_event_id  \n  \nfrom unified_users_aggs as b\n\ninner join unified_users_sessions as a\non a.session_identifier = b.first_session_identifier\n\ninner join unified_users_lasts c\non b.user_identifier = c.user_identifier",
      "cellId": 12,
      "useDatabase": "memory"
    },
    {
      "query": "select * from unified_users;",
      "cellId": 13,
      "useDatabase": "memory"
    },
    { "query": null, "useDatabase": "memory", "cellId": 14 }
  ],
  "currentDatabase": "memory",
  "viewMode": { "mode": "default" },
  "version": 1,
  "notebookSerializationFormat": 3
}
';

insert into _duckdb_ui.notebooks values (getvariable('notebook_id'), 'Snowplow Unified', current_timestamp);

-- populate the notebook with the Unified model queries
insert into _duckdb_ui.notebook_versions values (
    getvariable('notebook_id'),
    1,
    'Snowplow Unified models',
    getvariable('contents'),
    current_timestamp,
    NULL
)

