http:
  enabled: true
  address: 0.0.0.0:4195


input:
  label: "get_events"
  broker:
    copies: 1
    inputs:
      - type: aws_kinesis
        aws_kinesis:
          streams:
            - "enriched-good" # good events
          endpoint: "http://localhost.localstack.cloud:4566"
          region: "ap-southeast-2"
          credentials:
            id: "canyoukeepa"
            secret: "secret"
          dynamodb:
            table: "benthos_stream_offsets_good"
            create: true
      - type: aws_kinesis
        aws_kinesis:
          streams:
            - "enriched-bad" # bad events
          endpoint: "http://localhost.localstack.cloud:4566"
          region: "ap-southeast-2"
          credentials:
            id: "canyoukeepa"
            secret: "secret"
          dynamodb:
            table: "benthos_stream_offsets_bad"
            create: true
      - type: aws_kinesis
        aws_kinesis:
          streams:
            - "enriched-incomplete" # incomplete events
          endpoint: "http://localhost.localstack.cloud:4566"
          region: "ap-southeast-2"
          credentials:
            id: "canyoukeepa"
            secret: "secret"
          dynamodb:
            table: "benthos_stream_offsets_incomplete"
            create: true
      
pipeline:
  processors:
    - switch:
        - check: 'meta("kinesis_stream") == "enriched-good" || meta("kinesis_stream") == "enriched-incomplete"'
          processors:
            - log:
                message: "Processing good/incomplete message..."
            - bloblang: |
                root = {}
                root.headers = ["app_id", "platform", "etl_tstamp", "collector_tstamp", "dvce_created_tstamp", "event", "event_id", "txn_id", "name_tracker", "v_tracker", "v_collector", "v_etl", "user_id", "user_ipaddress", "user_fingerprint", "domain_userid", "domain_sessionidx", "network_userid", "geo_country", "geo_region", "geo_city", "geo_zipcode", "geo_latitude", "geo_longitude", "geo_region_name", "ip_isp", "ip_organization", "ip_domain", "ip_netspeed", "page_url", "page_title", "page_referrer", "page_urlscheme", "page_urlhost", "page_urlport", "page_urlpath", "page_urlquery", "page_urlfragment", "refr_urlscheme", "refr_urlhost", "refr_urlport", "refr_urlpath", "refr_urlquery", "refr_urlfragment", "refr_medium", "refr_source", "refr_term", "mkt_medium", "mkt_source", "mkt_term", "mkt_content", "mkt_campaign", "contexts", "se_category", "se_action", "se_label", "se_property", "se_value", "unstruct_event", "tr_orderid", "tr_affiliation", "tr_total", "tr_tax", "tr_shipping", "tr_city", "tr_state", "tr_country", "ti_orderid", "ti_sku", "ti_name", "ti_category", "ti_price", "ti_quantity", "pp_xoffset_min", "pp_xoffset_max", "pp_yoffset_min", "pp_yoffset_max", "useragent", "br_name", "br_family", "br_version", "br_type", "br_renderengine", "br_lang", "br_features_pdf", "br_features_flash", "br_features_java", "br_features_director", "br_features_quicktime", "br_features_realplayer", "br_features_windowsmedia", "br_features_gears", "br_features_silverlight", "br_cookies", "br_colordepth", "br_viewwidth", "br_viewheight", "os_name", "os_family", "os_manufacturer", "os_timezone", "dvce_type", "dvce_ismobile", "dvce_screenwidth", "dvce_screenheight", "doc_charset", "doc_width", "doc_height", "tr_currency", "tr_total_base", "tr_tax_base", "tr_shipping_base", "ti_currency", "ti_price_base", "base_currency", "geo_timezone", "mkt_clickid", "mkt_network", "etl_tags", "dvce_sent_tstamp", "refr_domain_userid", "refr_dvce_tstamp", "derived_contexts", "domain_sessionid", "derived_tstamp", "event_vendor", "event_name", "event_format", "event_version", "event_fingerprint", "true_tstamp"]
                root.types = ["this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.number().catch(null)", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.parse_json().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "Unstruct", "this.string()", "this.string()", "this.number().catch(null)", "this.number().catch(null)", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.number().catch(null)", "this.number().catch(null)", "this.number().catch(null)", "this.number().catch(null)", "this.number().catch(null)", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.bool().catch(null)", "this.string()", "this.number().catch(null)", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.bool().catch(null)", "this.number().catch(null)", "this.number().catch(null)", "this.string()", "this.number().catch(null)", "this.number().catch(null)", "this.string()", "this.number().catch(null)", "this.number().catch(null)", "this.number().catch(null)", "this.string()", "this.number().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string().catch(null)", "this.string()", "this.parse_json().catch(null)", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()", "this.string()"]
                root.fields = content().string().parse_csv(parse_header_row:false,delimiter:"\t",lazy_quotes:true).index(0)
                root.y = root.fields.enumerated().map_each(raw -> {
                    root.headers.index(raw.index): raw.value.bloblang(root.types.index(raw.index))
                  })

                root.schema = match meta("kinesis_stream") {
                  "enriched-good" => "iglu:io.snowplow/good/jsonschema/1-0-0"
                  "enriched-incomplete" => "iglu:io.snowplow/incomplete/jsonschema/1-0-0"
                }

                root.data = root.y.squash()
                root.headers = deleted()
                root.types = deleted()
                root.fields = deleted()
                root.y = deleted()

        - check: 'meta("kinesis_stream") == "enriched-bad"'
          processors:
            - log:
                message: "Processing bad message..."
logger:
  level: TRACE

output:
  broker:
    pattern: fan_out
    outputs:
      - stdout:
          codec: lines
      - websocket:
          url: ws://host.docker.internal:3001/api/ws
    