services:
  localstack:
    container_name: "snowplow-localstack"
    image: localstack/localstack:3.8.1
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # external services port range
    environment:
      # LocalStack configuration: https://docs.localstack.cloud/references/configuration/
      - DEBUG=${DEBUG:-0}
      - LS_LOG=debug # set to 'trace' for verbose
      - MAIN_CONTAINER_NAME=localstack-main
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh"
      - "./enrich-assets:/enrich-assets"

  stream-collector:
    container_name: "snowplow-stream-collector"
    image: snowplow/scala-stream-collector-kinesis:3.5.0-distroless
    command: ["--config", "/snowplow/collector/config.hocon"]
    depends_on:
      - localstack
    restart: on-failure:3
    ports:
      - "8080:8080"
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "AWS_REGION=ap-southeast-2"
      - "AWS_ACCESS_KEY_ID=localstack"
      - "AWS_SECRET_ACCESS_KEY=doesntmatter"
    volumes:
      - "./collector/config.hocon:/snowplow/collector/config.hocon"
    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"
      - "host.docker.internal:host-gateway"

  enrich:
    container_name: "snowplow-enrich"
    image: snowplow/snowplow-enrich-kinesis:6.0.1-rc1-distroless
    command: ["--config", "/snowplow/enrich/enrich.hocon", "--iglu-config", "/snowplow/iglu-client/iglu_resolver.json", "--enrichments", "/snowplow/enrich/enrichments"]
    depends_on:
      - stream-collector
      - iglu-server
    restart: on-failure:3
    ports:
      - "8085:8000" # health probe port
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "AWS_REGION=ap-southeast-2"
      - "AWS_ACCESS_KEY_ID=localstack"
      - "AWS_SECRET_ACCESS_KEY=doesntmatter"
      - "AWS_ENDPOINT_URL=http://localhost.localstack.cloud:4566"
      - "AWS_ENDPOINT_URL_S3=http://s3.localhost.localstack.cloud:4566"
    volumes:
      - "./enrich:/snowplow/enrich"
      - "./iglu-client:/snowplow/iglu-client"
    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"
      - "host.docker.internal:host-gateway"
      - "s3.localhost.localstack.cloud:host-gateway"
      - "enrich-assets.s3.localhost.localstack.cloud:host-gateway"

  postgres:
    container_name: iglu-postgres
    image: postgres:16
    restart: on-failure:3
    ports:
      - "5433:5432"
    logging:
      options:
        max-size: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: igludb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "notsosecret"

  iglu-server-setup:
    container_name: "snowplow-iglu-server-setup"
    image: snowplow/iglu-server:0.14.1-distroless
    command: ["setup", "--config", "/snowplow/iglu-server/config.hocon"]
    depends_on:
      - postgres
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "IGLU_DB_PASSWORD=notsosecret"
    volumes:
      - "./iglu-server:/snowplow/iglu-server"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  iglu-server:
    container_name: "snowplow-iglu-server"
    image: snowplow/iglu-server:0.14.1-distroless
    command: ["--config", "/snowplow/iglu-server/config.hocon"]
    depends_on:
      - iglu-server-setup
    ports:
      - "8081:8080"
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "IGLU_SUPER_API_KEY=deadbeef-dead-beef-dead-beefdeadbeef"
      - "IGLU_DB_PASSWORD=notsosecret"
    volumes:
      - "./iglu-server:/snowplow/iglu-server"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  statsd:
    container_name: "snowplow-statsd"
    image: graphiteapp/graphite-statsd:latest
    ports:
      - "8125:8125/udp"
      - "8126:8126"
      - "81:80"
      - "2003-2004:2003-2004"
      - "2023-2024:2023-2024"
      - "8084:8080"
    environment:
      - "STATSD_HOST=localhost"
      - "STATSD_PORT=8125"

  grafana:
    container_name: "snowplow-grafana"
    image: grafana/grafana:latest
    depends_on:
      - statsd
    ports:
      - "3000:3000"
    volumes:
      - "./grafana:/var/lib/grafana"
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources  # Mount provisioning config
    environment:
      - "GF_SECURITY_ADMIN_PASSWORD=admin"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  website-home:
    container_name: "example-website"
    image: nginx:latest
    depends_on:
      - stream-collector
    ports:
      - "8082:80"
    volumes:
      - "./site:/usr/share/nginx/html"

  redpanda-connect:
    container_name: "connect"
    image: docker.redpanda.com/redpandadata/connect:4.38.0
    command: ["-c", "/benthos.yaml"]
    ports:
      - "4195:4195"
    depends_on:
      - enrich
      - local-failed-ui
    volumes:
      - "./connect/benthos.yaml:/benthos.yaml"
      - "./database:/database"
    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"
      - "host.docker.internal:host-gateway"

  signals-forwarder:
    container_name: "signals-forwarder"
    image: docker.redpanda.com/redpandadata/connect:4.38.0
    command: ["-c", "/signals.yaml"]
    ports:
      - "4196:4196"
    depends_on:
      - enrich
    environment:
      - SIGNALS_DATA_URL=${SIGNALS_DATA_URL}
    volumes:
      - "./connect/signals.yaml:/signals.yaml"
    profiles: [signals]
    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"
      - "host.docker.internal:host-gateway"

  # # setup optional Snowflake streaming sink

  snowflake-loader:
    container_name: snowflake-streaming-loader
    image: snowplow/snowflake-loader-kinesis:0.5.1-distroless
    command: ["--config", "/loaders/snowflake_loader_kinesis.hocon"]
    depends_on:
      - enrich
    volumes:
      - "./loaders/snowflake_loader_kinesis.hocon:/loaders/snowflake_loader_kinesis.hocon"
    profiles: [snowflake-loader]
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "AWS_ACCESS_KEY_ID=localstack"
      - "AWS_SECRET_ACCESS_KEY=doesntmatter"
      - "AWS_REGION=ap-southeast-2"
      # the below are set in your .env
      - "SNOWFLAKE_URL=${SNOWFLAKE_URL}"
      - "SNOWFLAKE_USERNAME=${SNOWFLAKE_USERNAME}"
      - "SNOWFLAKE_PRIVATE_KEY=${SNOWFLAKE_PRIVATE_KEY}"
      - "SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}"
      - "SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}"
      - "SNOWFLAKE_TABLE=${SNOWFLAKE_TABLE}"

    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"

  snowflake-incomplete-loader:
    container_name: snowflake-streaming-loader-incomplete
    image: snowplow/snowflake-loader-kinesis:0.5.1-distroless
    command: ["--config", "/loaders/snowflake_loader_kinesis_incomplete.hocon"]
    depends_on:
      - enrich
    volumes:
      - "./loaders/snowflake_loader_kinesis_incomplete.hocon:/loaders/snowflake_loader_kinesis_incomplete.hocon"
    profiles: [snowflake-incomplete-loader]
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "AWS_ACCESS_KEY_ID=localstack"
      - "AWS_SECRET_ACCESS_KEY=doesntmatter"
      - "AWS_REGION=ap-southeast-2"
      # the below are set in .env
      - "SNOWFLAKE_URL=${SNOWFLAKE_URL}"
      - "SNOWFLAKE_USERNAME=${SNOWFLAKE_USERNAME}"
      - "SNOWFLAKE_PRIVATE_KEY=${SNOWFLAKE_PRIVATE_KEY}"
      - "SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}"
      - "SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}"
      - "SNOWFLAKE_TABLE=${SNOWFLAKE_INCOMPLETE_TABLE}"

    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"

  lake-loader:
    container_name: lake-loader
    image: snowplow/lake-loader-aws:0.6.3
    command: ["--config", "/loaders/lake_loader_config.hocon", "--iglu-config", "/snowplow/iglu-client/iglu_resolver.json"]
    depends_on:
      - enrich
      - iglu-server
    volumes:
      - "./loaders/lake_loader_config_iceberg_s3.hocon:/loaders/lake_loader_config.hocon"
      - "./iglu-client:/snowplow/iglu-client"
      - "./database/:/data/" # allows mirroring between the container FS and host FS of events data
    profiles: [lake-loader]
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "AWS_ENDPOINT_URL=http://localhost.localstack.cloud:4566"
      - "AWS_ENDPOINT_URL_S3=http://s3.localhost.localstack.cloud:4566"
      - "AWS_ACCOUNT_ID=000000000000"
      - "AWS_ACCESS_KEY_ID=localstack"
      - "AWS_SECRET_ACCESS_KEY=doesntmatter"
      - "AWS_REGION=ap-southeast-2"

    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"
      - "s3.localhost.localstack.cloud:host-gateway"
      - "snowplow-lake-loader.s3.localhost.localstack.cloud:host-gateway"

  bigquery-loader:
    container_name: bigquery-loader
    image: snowplow/bigquery-loader-kinesis:2.0.1-distroless
    command: ["--config", "/loaders/bigquery_loader_config.hocon", "--iglu-config", "/snowplow/iglu-client/iglu_resolver.json"]
    depends_on:
      - enrich
      - iglu-server
    volumes:
      - "./loaders/bigquery_loader_config.hocon:/loaders/bigquery_loader_config.hocon"
      - "./iglu-client:/snowplow/iglu-client"
    profiles: [bigquery-loader]
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "GCP_PROJECT_ID=${GCP_PROJECT_ID}"
      - "BIGQUERY_DATASET=${BIGQUERY_DATASET}"
      - "BIGQUERY_TABLE=${BIGQUERY_TABLE}"
      - "SERVICE_ACCOUNT_CREDENTIALS=${SERVICE_ACCOUNT_CREDENTIALS}"
      - "AWS_ACCESS_KEY_ID=localstack"
      - "AWS_SECRET_ACCESS_KEY=doesntmatter"
      - "AWS_REGION=ap-southeast-2"
      - "AWS_ENDPOINT_URL=http://localhost.localstack.cloud:4566"
      - "AWS_DEFAULT_REGION=ap-southeast-2"
      - "DEFAULT_REGION=ap-southeast-2"

    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"

  snowbridge:
    container_name: snowbridge
    image: snowplow/snowbridge:3.5.0-aws-only
    command: ["/opt/snowplow/snowbridge"]
    restart: on-failure:3
    depends_on:
      localstack:
        condition: service_healthy
      enrich:
        condition: service_started
    volumes:
      - "./snowbridge:/snowbridge"
    profiles: [snowbridge]
    environment:
      - "ACCEPT_LICENSE=${ACCEPT_LICENSE}"
      - "AWS_REGION=ap-southeast-2"
      - "AWS_ACCESS_KEY_ID=localstack"
      - "AWS_SECRET_ACCESS_KEY=doesntmatter"
      - "AWS_ENDPOINT_URL=http://localhost.localstack.cloud:4566"
      - "SNOWBRIDGE_CONFIG_FILE=/snowbridge/config.hcl"
      - "START_TIMESTAMP=${START_TIMESTAMP}"
    extra_hosts:
      - "localhost.localstack.cloud:host-gateway"

  local-failed-ui:
    container_name: "local-failed-ui"
    image: "snowplow/failed-events-ui:0.0.3"
    ports:
      - "3001:3000"

  ngrok:
    container_name: ngrok-tunnel
    image: ngrok/ngrok:latest
    profiles: [tunnel]
    restart: unless-stopped
    command:
      - "start"
      - "--all"
      - "--config"
      - "/etc/ngrok.yml"
    volumes:
      - "./tunnel/ngrok.yml:/etc/ngrok.yml"
      - "./tunnel/policy.yml:/etc/policy.yml"
    ports:
      - "4040:4040"

  control-plane:
    container_name: "snowplow-control-plane"
    build: "control-plane/"
    command: "flask run --host=0.0.0.0 --debug"
    environment:
      - "FLASK_APP=app"
      - "IGLU_SUPER_API_KEY=deadbeef-dead-beef-dead-beefdeadbeef"
    volumes:
      - "./enrich:/enrich"
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "8083:5000"
    extra_hosts:
      - "host.docker.internal:host-gateway"

